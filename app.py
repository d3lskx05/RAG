import streamlit as st
from utils import load_all_excels, semantic_search, keyword_search, compute_phrase_embeddings, MODEL_CONFIG
import numpy as np
import psutil, os, time
import torch, transformers, sentence_transformers

st.set_page_config(page_title="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∑ –§–õ", layout="centered")
st.title("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∑")

@st.cache_data(show_spinner=False)
def get_data():
    df = load_all_excels()
    df = compute_phrase_embeddings(df)
    return df

df = get_data()

# üìä –ë–ª–æ–∫ –æ—Ç–ª–∞–¥–∫–∏ –≤ sidebar
with st.sidebar:
    st.markdown("### ‚öôÔ∏è –û—Ç–ª–∞–¥–∫–∞")

    st.write("–ú–æ–¥–µ–ª—å:", MODEL_CONFIG["name"])
    st.write("–ü—Ä–µ—Ñ–∏–∫—Å—ã:", MODEL_CONFIG["add_prefix"])

    st.write("–§—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", len(df))
    st.write("–ö–æ–ª-–≤–æ —Ç–µ–º:", len({t for ts in df['topics'] for t in ts}))
    st.write("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:", df.attrs.get("emb_dim", "-"))

    avg_len = int(df["phrase"].str.len().mean())
    max_len = int(df["phrase"].str.len().max())
    st.write(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ñ—Ä–∞–∑—ã: {avg_len} —Å–∏–º–≤.")
    st.write(f"–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Ñ—Ä–∞–∑—ã: {max_len} —Å–∏–º–≤.")

    if "embedding_time" in df.attrs:
        st.write("–í—Ä–µ–º—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:", round(df.attrs["embedding_time"], 3), "—Å–µ–∫.")

    if "last_query_time" in st.session_state:
        st.write("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:", round(st.session_state["last_query_time"], 3), "—Å–µ–∫.")

    process = psutil.Process(os.getpid())
    mem_info = process.memory_info()
    cpu = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory()
    st.write(f"CPU: {cpu}%")
    st.write(f"RAM: {ram.percent}% ({mem_info.rss/1024**2:.1f} MB)")

    st.write("Torch:", torch.__version__)
    st.write("Transformers:", transformers.__version__)
    st.write("Sentence-Transformers:", sentence_transformers.__version__)

# üîò –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º
all_topics = sorted({topic for topics in df['topics'] for topic in topics})
selected_topics = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–∏—Å–∫–∞):", all_topics)
filter_search_by_topics = st.checkbox("–ò—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫–∞—Ö", value=False)

if selected_topics:
    st.markdown("### üìÇ –§—Ä–∞–∑—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º:")
    filtered_df = df[df['topics'].apply(lambda topics: any(t in selected_topics for t in topics))]
    for row in filtered_df.itertuples():
        with st.container():
            st.markdown(f"""
                <div style="border: 1px solid #e0e0e0; border-radius: 12px; padding: 16px; margin-bottom: 12px; background-color: #f9f9f9; box-shadow: 0 2px 6px rgba(0,0,0,0.05);">
                    <div style="font-size: 18px; font-weight: 600; color: #333;">üìù {row.phrase_full}</div>
                    <div style="margin-top: 4px; font-size: 14px; color: #666;">üîñ –¢–µ–º–∞—Ç–∏–∫–∏: <strong>{', '.join(row.topics)}</strong></div>
                </div>""", unsafe_allow_html=True)
            if row.comment and str(row.comment).strip().lower() != "nan":
                with st.expander("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", expanded=False):
                    st.markdown(row.comment)

# üì• –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

if query:
    try:
        search_df = df
        if filter_search_by_topics and selected_topics:
            mask = df['topics'].apply(lambda topics: any(t in selected_topics for t in topics))
            search_df = df[mask].reset_index(drop=True)

            full_embs = df.attrs.get('phrase_embs', None)
            full_norms = df.attrs.get('phrase_embs_norms', None)
            if full_embs is not None and full_norms is not None:
                indices = list(np.where(mask.values)[0])
                if indices:
                    search_df.attrs['phrase_embs'] = full_embs[indices]
                    search_df.attrs['phrase_embs_norms'] = full_norms[indices]
                else:
                    emb_dim = full_embs.shape[1] if full_embs.size else 0
                    search_df.attrs['phrase_embs'] = np.zeros((0, emb_dim), dtype='float32')
                    search_df.attrs['phrase_embs_norms'] = np.zeros((0,), dtype='float32')

        if search_df.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º.")
        else:
            start = time.time()
            results = semantic_search(query, search_df)
            st.session_state["last_query_time"] = time.time() - start

            if results:
                st.markdown("### üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
                for score, phrase_full, topics, comment in results:
                    with st.container():
                        st.markdown(f"""
                            <div style="border: 1px solid #e0e0e0; border-radius: 12px; padding: 16px; margin-bottom: 12px; background-color: #f9f9f9; box-shadow: 0 2px 6px rgba(0,0,0,0.05);">
                                <div style="font-size: 18px; font-weight: 600; color: #333;">üß† {phrase_full}</div>
                                <div style="margin-top: 4px; font-size: 14px; color: #666;">üîñ –¢–µ–º–∞—Ç–∏–∫–∏: <strong>{', '.join(topics)}</strong></div>
                                <div style="margin-top: 2px; font-size: 13px; color: #999;">üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f}</div>
                            </div>""", unsafe_allow_html=True)
                        if comment and str(comment).strip().lower() != "nan":
                            with st.expander("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", expanded=False):
                                st.markdown(comment)
            else:
                st.warning("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–º–Ω–æ–º –ø–æ–∏—Å–∫–µ.")

            exact_results = keyword_search(query, search_df)
            if exact_results:
                st.markdown("### üß∑ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫:")
                for phrase, topics, comment in exact_results:
                    with st.container():
                        st.markdown(f"""
                            <div style="border: 1px solid #e0e0e0; border-radius: 12px; padding: 16px; margin-bottom: 12px; background-color: #f9f9f9; box-shadow: 0 2px 6px rgba(0,0,0,0.05);">
                                <div style="font-size: 18px; font-weight: 600; color: #333;">üìå {phrase}</div>
                                <div style="margin-top: 4px; font-size: 14px; color: #666;">üîñ –¢–µ–º–∞—Ç–∏–∫–∏: <strong>{', '.join(topics)}</strong></div>
                            </div>""", unsafe_allow_html=True)
                        if comment and str(comment).strip().lower() != "nan":
                            with st.expander("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", expanded=False):
                                st.markdown(comment)
            else:
                st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
